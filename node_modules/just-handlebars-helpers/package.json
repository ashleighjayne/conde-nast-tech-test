{
  "_args": [
    [
      {
        "raw": "just-handlebars-helpers@^1.0.13",
        "scope": null,
        "escapedName": "just-handlebars-helpers",
        "name": "just-handlebars-helpers",
        "rawSpec": "^1.0.13",
        "spec": ">=1.0.13 <2.0.0",
        "type": "range"
      },
      "/Users/ashleighsutton/Sites/conde-nast-tech-test"
    ]
  ],
  "_from": "just-handlebars-helpers@>=1.0.13 <2.0.0",
  "_id": "just-handlebars-helpers@1.0.13",
  "_inCache": true,
  "_location": "/just-handlebars-helpers",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/just-handlebars-helpers-1.0.13.tgz_1492627592851_0.5709704025648534"
  },
  "_npmUser": {
    "name": "kabirbaidhya",
    "email": "kabirbaidhya@gmail.com"
  },
  "_npmVersion": "4.0.2",
  "_phantomChildren": {
    "amdefine": "1.0.1",
    "optimist": "0.6.1",
    "wordwrap": "0.0.3"
  },
  "_requested": {
    "raw": "just-handlebars-helpers@^1.0.13",
    "scope": null,
    "escapedName": "just-handlebars-helpers",
    "name": "just-handlebars-helpers",
    "rawSpec": "^1.0.13",
    "spec": ">=1.0.13 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/just-handlebars-helpers/-/just-handlebars-helpers-1.0.13.tgz",
  "_shasum": "2c591a2aa49616d4688ae4a89955f6f32e5d12e2",
  "_shrinkwrap": null,
  "_spec": "just-handlebars-helpers@^1.0.13",
  "_where": "/Users/ashleighsutton/Sites/conde-nast-tech-test",
  "author": {
    "name": "Kabir Baidhya",
    "email": "kabirbaidhya@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/leapfrogtechnology/just-handlebars-helpers/issues"
  },
  "contributors": [
    {
      "name": "Saugat Acharya",
      "email": "mesaugat@gmail.com"
    },
    {
      "name": "Sanjeev Kumar Pandit",
      "email": "binarysanjeev@gmail.com"
    },
    {
      "name": "Suman Gurung",
      "email": "gurung.suman15@gmail.com"
    },
    {
      "name": "Deepak Pandey",
      "email": "pandey.dip@gmail.com"
    }
  ],
  "dependencies": {
    "handlebars": "^3.*"
  },
  "description": "A lightweight package with common helpers for Handlebars",
  "devDependencies": {
    "babel-eslint": "^6.0.0",
    "babel-preset-es2015": "^6.5.0",
    "babelify": "^7.2.0",
    "browserify": "^13.0.0",
    "browserify-istanbul": "^0.2.1",
    "browserify-shimify": "0.1.0-0",
    "codecov": "^1.0.1",
    "currencyformatter.js": "^1.0.4",
    "eslint": "2.2.0",
    "faker": "^4.1.0",
    "gulp": "^3.9.1",
    "gulp-babel": "^6.1.2",
    "gulp-eslint": "^2.0.0",
    "gulp-rename": "^1.2.2",
    "gulp-uglify": "^1.5.2",
    "isparta": "^4.0.0",
    "istanbul": "^0.4.2",
    "jasmine-core": "^2.4.1",
    "karma": "^0.13.21",
    "karma-browserify": "^5.0.1",
    "karma-coverage": "^0.5.3",
    "karma-jasmine": "^0.3.7",
    "karma-phantomjs-launcher": "^1.0.0",
    "karma-spec-reporter": "0.0.24",
    "moment": "^2.11.2",
    "phantomjs-prebuilt": "^2.1.4",
    "rimraf": "^2.6.1",
    "sprintf-js": "^1.0.3",
    "vinyl-source-stream": "^1.1.0",
    "watchify": "^3.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "2c591a2aa49616d4688ae4a89955f6f32e5d12e2",
    "tarball": "https://registry.npmjs.org/just-handlebars-helpers/-/just-handlebars-helpers-1.0.13.tgz"
  },
  "gitHead": "2c312d1f4b935d76b80b6a2261e71eb575440ab3",
  "homepage": "https://github.com/leapfrogtechnology/just-handlebars-helpers#readme",
  "keywords": [
    "handlebars",
    "helpers",
    "lightweight",
    "just-handlebars",
    "just-handlebars-helpers",
    "handlebars-helpers",
    "mustache",
    "template",
    "templating",
    "html"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "gurungsuman15",
      "email": "gurung.suman15@gmail.com"
    },
    {
      "name": "kabirbaidhya",
      "email": "kabirbaidhya@gmail.com"
    },
    {
      "name": "leapfrogsuperadmin",
      "email": "superadmin@lftechnology.com"
    },
    {
      "name": "mesaugat",
      "email": "mesaugat@gmail.com"
    },
    {
      "name": "sanjeevkpandit",
      "email": "binarysanjeev@gmail.com"
    }
  ],
  "name": "just-handlebars-helpers",
  "optionalDependencies": {},
  "readme": "# Just Handlebars Helpers\n[![NPM Version](https://img.shields.io/npm/v/just-handlebars-helpers.svg?style=flat-square)](https://www.npmjs.com/package/just-handlebars-helpers)\n[![NPM Downloads](https://img.shields.io/npm/dt/just-handlebars-helpers.svg?style=flat-square)](https://www.npmjs.com/package/just-handlebars-helpers)\n[![Code Climate](https://img.shields.io/codeclimate/github/kabisaict/flow.svg?style=flat-square)](https://codeclimate.com/github/leapfrogtechnology/just-handlebars-helpers)\n[![Travis](https://img.shields.io/travis/leapfrogtechnology/just-handlebars-helpers.svg?style=flat-square)](https://travis-ci.org/leapfrogtechnology/just-handlebars-helpers)\n[![Codecov](https://img.shields.io/codecov/c/github/leapfrogtechnology/just-handlebars-helpers.svg?style=flat-square)](https://codecov.io/github/leapfrogtechnology/just-handlebars-helpers?branch=master)\n\nA lightweight package with common [Handlebars](https://github.com/wycats/handlebars.js) helpers.\n\n## Installation\n\n```bash\n$ npm install just-handlebars-helpers --save\n```\n\nor\n\n```bash\n$ yarn add just-handlebars-helpers\n```\n## Usage\n\n#### Browsers:\n\n```html\n<!-- Load Handlebars -->\n<script type=\"text/javascript\" src=\"/path/to/handlebars/dist/handlebars.min.js\"></script>\n<!-- Load the package -->\n<script type=\"text/javascript\" src=\"/path/to/just-handlebars-helpers/dist/h.min.js\"></script>\n<script type=\"text/javascript\">\n    // Register helpers for Handlebars\n    H.registerHelpers(Handlebars);\n</script>\n\n```\n#### Node:\n\n```javascript\n// Load Handlebars\nvar Handlebars = require('handlebars');\n// Load the package\nvar H = require('just-handlebars-helpers');\n\n// Register helpers for Handlebars\nH.registerHelpers(Handlebars);\n```\n## Helpers\n\n| Helper                                | Description                                             |\n|---------------------------------------|---------------------------------------------------------|\n| [eq](#eq)                             | Strict equality `===`                                   |\n| [eqw](#eqw)                           | Equality `==`                                           |\n| [neq](#neq)                           | Strict inequality `!==`                                 |\n| [neqw](#neqw)                         | Inequality `!=`                                         |\n| [lt](#lt)                             | Less than `<`                                           |\n| [lte](#lte)                           | Less than or equal `<=`                                 |\n| [gt](#gt)                             | Greater than `>`                                        |\n| [gte](#gte)                           | Greater than or equal `>=`                              |\n| [not](#not)                           | Not `!`                                                 |\n| [ifx](#ifx)                           | Imitates conditional operator `?:`                      |\n| [empty](#empty)                       | Check if an array is empty                              |\n| [count](#count)                       | Length of an array                                      |\n| [and](#and)                           | Logical AND operation                                   |\n| [or](#or)                             | Logical OR operation                                    |\n| [coalesce](#coalesce)                 | Returns first non-falsy value from list of parameters   |\n| [includes](#includes)                 | Check for a value inside an array                       |\n| [excerpt](#excerpt)                   | Extract a sub-string from a string                      |\n| [sanitize](#sanitize)                 | Sanitize a string to url friendy dash case              |\n| [newLineToBr](#newlinetobr)           | Replace new line with line breaks `<br>` of a string    |\n| [capitalizeEach](#capitalizeeach)     | Capitalize the first letter of each word in a string    |\n| [capitalizeFirst](#capitalizefirst)   | Capitalize the first letter of a string                 |\n| [sprintf](#sprintf)                   | String produced according to the formatting format      |\n| [lowercase](#lowercase)               | String to lowercase                                     |\n| [uppercase](#uppercase)               | String to uppercase                                     |\n| [first](#first)                       | First element of an array                               |\n| [last](#last)                         | Last element of an array                                |\n| [concat](#concat)                     | Concatenate two or more strings                         |\n| [join](#join)                         | Join elements of an array using a delimeter             |\n| [sum](#sum)                           | Sum of two numbers                                      |\n| [difference](#difference)             | Difference of two numbers                               |\n| [ceil](#ceil)                         | Round a number upward to its nearest integer            |\n| [floor](#floor)                       | Round a number downward to its nearest integer          |\n| [formatDate](#formatdate)             | Format date to specified format                         |\n| [showIf](#showif)                     | Show HTML element if expression is true                 |\n| [hideIf](#hideif)                     | Hide HTML element if expression is true                 |\n| [selectedIf](#selectedif)             | Select `<option>` if expression is true                 |\n| [checkedIf](#checkedif)               | Check the `<input>` checkbox if expression is true      |\n| [options](#options)                   | Generate `<option>` list for `<select>`                 |\n| [formatCurrency](#formatcurrency)     | Format currency value according to country              |\n\n### Conditional\n#### eq\nDetermine whether or not two values are equal (===).\n\nParameters:\n```\nvalue1 [mixed] First value to be compared with second. (Required)\nvalue2 [mixed] Second value to be compared with first. (Required)\n```\nReturns `boolean`\n\nUsage:\n```\n{{eq '3' 3}}    => false\n\n{{#if (eq foo 'bar')}}\n\tHello\n{{/if}}\n```\n\n#### eqw\nDetermine whether or not two values are equal (==) i.e. weak checking.\n\nParameters:\n```\nvalue1 [mixed] First value to be compared with second. (Required)\nvalue2 [mixed] Second value to be compared with first. (Required)\n```\nReturns `boolean`\n\nUsage:\n```\n{{eqw '3' 3}}   => true\n\n{{#if (eqw foo 'bar')}}\n\tHello\n{{/if}}\n```\n\n#### neq\nDetermine whether or not two values are not equal (!==).\n\nParameters:\n```\nvalue1 [mixed] First value to be compared with second. (Required)\nvalue2 [mixed] Second value to be compared with first. (Required)\n```\nReturns `boolean`\n\nUsage:\n```\n{{neq 4 3}}    => true\n\n{{#if (neq foo 'bar')}}\n\tHello\n{{/if}}\n```\n\n#### neqw\nDetermine whether or not two values are not equal (!=) weak checking.\n\nParameters:\n```\nvalue1 [mixed] First value to be compared with second. (Required)\nvalue2 [mixed] Second value to be compared with first. (Required)\n```\nReturns `boolean`\n\nUsage:\n```\n{{neqw '3' 3}}    => false\n\n{{#if (neqw foo 'bar')}}\n\tHello\n{{/if}}\n```\n\n#### lt\nCheck for less than condition (a < b).\n\nParameters:\n```\nvalue1 [mixed] First value to be compared with second. (Required)\nvalue2 [mixed] Second value to be compared with first. (Required)\n```\nReturns `boolean`\n\nUsage:\n```\n{{lt 2 3}}   => true\n\n{{#if (lt 2 5)}}\n\tHello\n{{/if}}\n```\n\n#### lte\nCheck for less than or equals condition (a <= b).\n\nParameters:\n```\nvalue1 [mixed] First value to be compared with second. (Required)\nvalue2 [mixed] Second value to be compared with first. (Required)\n```\nReturns `boolean`\n\nUsage:\n```\n{{lte 2 3}}   => true\n\n{{#if (lte 5 6)}}\n\tHello\n{{/if}}\n```\n\n#### gt\nCheck for greater than condition (a > b).\n\nParameters:\n```\nvalue1 [mixed] First value to be compared with second. (Required)\nvalue2 [mixed] Second value to be compared with first. (Required)\n```\nReturns `boolean`\n\nUsage:\n```\n{{gt 2 3}}   => false\n\n{{#if (gt 10 7)}}\n\tHello\n{{/if}}\n```\n\n#### gte\nCheck for greater than or equals condition (a >= b).\n\nParameters:\n```\nvalue1 [mixed] First value to be compared with second. (Required)\nvalue2 [mixed] Second value to be compared with first. (Required)\n```\nReturns `boolean`\n\nUsage:\n```\n{{gte 3 3}}   => true\n\n{{#if (gte 10 2)}}\n\tHello\n{{/if}}\n```\n\n#### not\nLogical NOT of any expression. Equivalent to `!` operator.\n\nParameters:\n```\nexpression [mixed] Any expression.\n```\nReturns `boolean`\n\nUsage:\n```\n{{not true}}    => false\n{{not false}}   => true\n\n{{#if (not (eq foo 'bar'))}}\n\tHello\n{{/if}}\n```\n\n#### ifx\nHelper to imitate the ternary conditional operator ?:. E.g. `5 > 7 ? 'foo' : 'bar'`.\n\nParameters:\n```\ncondition [boolean] Satisfying condition for getting first value. Either true of false. (Required)\nvalue1 [mixed] First value to be displayed as result. (Required)\nvalue2 [mixed] Second value to be displayed as result. Defaults to an empty string (Optional)\n```\nReturns `mixed`\n\nUsage:\n```\n{{ifx true 'Foo' 'Bar'}}        => Foo  // return (true) ? 'Foo' : 'Bar'\n{{ifx false 'Foo' 'Bar'}}       => Foo  // return (false) ? 'Foo' : 'Bar'\n{{ifx (eq value 1) 5 6}}        => 6    // return (value === 1) ? 5 : 6\n{{ifx (not (eq value 1)) 5 6}}  => 6    // return (value !== 1) ? 5 : 6\n\n<!-- The third parameter is optional, and by default it will be blank string ('') -->\n{{ifx true 'active'}}  => 'active'\n{{ifx false 'active'}}  => ''\n```\n\n#### empty\nCheck if an array is empty.\n\nParameters:\n```\narray [array] Array/object to be checked. (Required)\n```\nReturns `boolean`\n\nUsage:\n```\nvar array = [5, 6];     // An array.\n{{empty array}} => false\n\n{{#if (empty array)}}\n\tHello\n{{/if}}\n```\n\n#### count\nDetermine the length of an array. Equivalent to `array.length` operator in JavaScript.\n\nParameters:\n```\narray [array] Array whose elements to be counted. (Required)\n```\nReturns `number|false`\n\nUsage:\n```\nvar array = [5, 6];    // An array.\n{{count array}} =>  2;\n```\n\n#### and\nReturns the logical AND of two or more parameters passed i.e\nit is true iff all the parameters are true.\n\nParameters:\n```\nparams [mixed] Any number of boolean parameters. (Required)\n```\nReturns `boolean`\n\nUsage:\n```\nvar value1 = value2 = true;\n{{and value1 value2}}    => true\n\nvar value1 = false, value2 = true;\n{{and value1 value2}}    => false\n\n{{#if (and value1 value2)}}\n    // do something\n{{else}}\n    // do something else\n{{/if}}\n```\n\n#### or\nReturns the logical OR of two or more parameters passed i.e\nit is true if any of the parameters is true.\n\nParameters:\n```\nparams [mixed] Any number of boolean parameters. (Required)\n```\nReturns `boolean`\n\nUsage:\n```\nvar value1 = true, value2 = false;\n{{or value1 value2}}    => true\n\nvar value = value2 = false;\n{{or value1 value2}}    => false\n\n{{#if (or value1 value2)}}\n    // do something\n{{else}}\n    // do something else\n{{/if}}\n```\n\n#### coalesce\nReturns the first non-falsy value from the parameter list.\nWorks quite similar to the SQL's COALESCE() function, but unlike this\nchecks for the first non-false parameter.\n\nParameters:\n```\nparams [mixed] Any number of parameters. (Required)\n```\nReturns `mixed`\n\nUsage:\n```\nvar fullName = 'Foo Bar', nickName = 'foob';\n{{coalesce fullName nickName 'Unknown'}}    => 'Foo Bar'\n\nvar fullName = '', nickName = 'foob';\n{{coalesce fullName nickName 'Unknown'}}    => 'foob'\n```\n\n#### includes\nReturns true if an array includes a value.\nIt checks for the existence of the value in array strictly(value + data type) by default.\nCan check non-strictly(value only) by sending third argument as false.\n\nParameters:\n```\nparams [array] The array. (Required)\nparams [mixed] The value to be checked for existence in the array. (Required)\nparams [boolean] FALSE for non-strict checking. TRUE by default. (Optional)\n```\nReturns `boolean`\n\nUsage:\n```\nvar array = [1, 2, 3];\nvar value = 2;\n\n{{includes array value}}        => true\n\nvar value = '2'\n{{includes array value}}        => false\n{{includes array value true}}   => false\n{{includes array value false}}  => true\n\n{{#if (includes array value)}}\n   <!-- Do something -->\n{{/if}}\n\n{{ifx (includes array value) 'Yes' 'No'}}\n```\n\n### Strings\n#### excerpt\nExtract a sub-string from a string.\n\nParameters:\n```\nstring [string] The string from which characters are to be extracted. (Required)\nlength [int] Number of characters to be extracted from string. Default value is 50. (Optional)\n```\nReturns `string`\n\nUsage:\n```\n{{excerpt 'Just Wow' 4}} => 'Just...'\n```\n\n#### sanitize\nConverts a string to URL friendly dash-case string removing special characters.\n\nParameters\n```\nstring [string] The string to be converted to URL. (Required)\n```\nReturns `string`\n\nUsage:\n```\n{{sanitize 'JuSt #Wow'}} => 'just-wow'\n```\n\n#### newLineToBr\nReplace `\\n` with `<br>` tags.\n\nParameters:\n```\nstring [string] The string that needs replacement of \\n by <br> tags. (Required)\n```\nReturns `string`\n\nUsage:\n```\n{{{newLineToBr 'newLineToBr helper \\n is very \\n useful.'}}}    => newLineToBr helper <br> is very <br> useful.\n```\n\n#### capitalizeEach\nCapitalize the first letter of each word in a string.\n\nParameters\n```\nstring [string] The sentence/string to be capitalized. (Required)\n```\nReturns `string`\n\nUsage:\n```\n{{capitalizeEach 'just wow'}} => 'Just Wow'\n```\n\n#### capitalizeFirst\nCapitalize the first letter of a string.\n\nParameters:\n```\nstring [string] The sentence/string to be capitalized. (Required)\n```\nReturns `string`\n\nUsage:\n```\n{{capitalizeFirst 'just wow'}} => 'Just wow'\n```\n\n#### sprintf\nA sprintf helper to be used in the handlebars templates that supports arbitrary parameters.\n\n**Note:** To use sprintf helper install [sprintf-js](https://www.npmjs.com/package/sprintf-js)\n\n``` npm install sprintf-js --save ```\n\nParameters:\n```\nformat [string] The message/string that uses different formats of variables. (Required)\nargs [arbitrary arguments] Any number of parameters/values. (Required)\n```\nReturns `string`\n\nUsage:\n```\n{{sprintf '%s %s!' 'Hello' 'Kabir' }}\n{{sprintf '%s %s %d %s %d' 'Foo' 'Bar' 55 'Baz' '20'}}\n{{sprintf '%(greeting)s %(name)s! How are you?' obj }}\n{{sprintf '%(greeting)s %(name)s! ' greeting='Hello' name='Kabir'}}\n```\n\n#### lowercase\nChanges the string to lowercase.\n\nParameters:\n```\nparam [string] The string to be converted to lower case. (Required)\n```\nReturns `string`\n\nUsage:\n```\n{{lowercase 'JUST WOW!!!'}} => 'just wow!!!'\n```\n\n#### uppercase\nChanges the string to uppercase.\n\nParameters:\n```\nparam [string] The string to be converted to upper case. (Required)\n```\nReturns `string`\n\nUsage:\n```\n{{uppercase 'just wow!!!'}} => 'JUST WOW!!!'\n```\n\n#### first\nGet the first element of a collection/array.\n\nParameters:\n```\ncollection [array] The collection/array of objects(strings, integers). (Required)\n```\nReturns `string`\n\nUsage:\n```\nsomeArray = ['David', 'Miller', 'Jones'];\n{{first someArray}} => 'David'\n```\n\n#### last\nGet the last element of a collection/array.\n\nParameters:\n```\ncollection [array] The collection/array of objects(strings, integers). (Required)\n```\nReturns `string`\n\nUsage:\n```\nsomeArray = ['David', 'Miller', 'Jones'];\n{{last someArray}} => 'Jones'\n```\n\n#### concat\nConcat two or more strings.\n\nParameters:\n```\nparams [arguments] Any number of arguments. (Required)\n```\nReturns `string`\n\nUsage:\n```\n{{concat 'Hello' ' world' '!!!'}} => 'Hello world!!!'\n```\n\n#### join\nJoin the elements of an array using a delimeter.\n\nParameters:\n```\narray [array] An array of elements to be joined. (Required)\ndelimeter [string] The delimeter using which the elements of array are to be joined. (Required)\n```\nReturns `string`\n\nUsage:\n```\nsomeArray = ['Hands', 'legs', 'feet'];\n{{join someArray ' & '}}   => 'Hands & legs & feet'\n```\n\n### Math\n#### sum\nA sum helper calculating the sum of two numbers.\n\nParameters:\n```\nvalue1 [number] First number. (Required)\nvalue2 [number] Second number. (Required)\n```\nReturns `number`\n\nUsage:\n```\n{{sum 1 2}}     => 3\n{{sum 5.6 6.7}} => 12.3\n```\n\n#### difference\nA difference helper calculating the difference of two numbers.\n\nParameters:\n```\nvalue1 [number] First number. (Required)\nvalue2 [number] Second number. (Required)\n```\nReturns `number`\n\nUsage:\n```\n{{difference 5 2}}      => 3\n{{difference 7.2 3.4}}  => 3.8\n```\n\n#### ceil\nA ceil helper to find the ceil value of the number. Equivalent to `Math.ceil()` in JavaScript.\n\nParameters:\n```\nvalue1 [number] Number to be rounded to nearest greater integer. (Required)\n```\nReturns `integer`\n\nUsage:\n```\n{{ceil 5.6}}    => 6\n```\n\n#### floor\nA floor helper to find the floor value of the number. Equivalent to `Math.floor()` in JavaScript.\n\nParameters:\n```\nvalue [number] Number to be rounded to nearest lower integer. (Required)\n```\nReturns `integer`\n\nUsage:\n```\n{{floor 5.6}}   => 5\n```\n\n### DateTime\n\n**Note:** To use DateTime helpers install [moment](https://www.npmjs.com/package/moment)\n\n``` npm install moment --save ```\n\n#### formatDate\nA formatDate helper to format date using moment js.\n\nParameters:\n```\nformatString [string] Format string based on moment.js (Required)\ndate [date] The date/date-time that needs to be formatted. (Required)\n```\nReturns `string`\n\nUsage:\n```\nvar date = new Date();      // Date | Date-time\n{{formatDate 'MM/DD/YYYY' date}}\n\nvar date = new Date('01/22/2016');\n{{formatDate 'YYYY-MM-DD' date}}    => 2016-01-22\n```\n\n### HTML\n#### showIf\nA showIf helper for showing any HTML element.\n\nParameters:\n```\nexpression [boolean] Condition to be checked. (Required)\n```\nReturns `string`\n\nUsage:\n```\n{{showIf true}}     => ''\n{{showIf false}}    => 'hidden'\n```\n\n#### hideIf\nA hideIf helper for hiding any HTML element.\n\nParameters:\n```\nexpression [boolean] Condition to be checked. (Required)\n```\nReturns `string`\n\nUsage:\n```\n{{hideIf true}}     => 'hidden'\n{{hideIf false}}    => ''\n```\n\n#### selectedIf\nA selectedIf helper for dropdown and radio boxes.\n\nParameters:\n```\nexpression [boolean] Condition to be checked. (Required)\n```\nReturns `string`\n\nUsage:\n```\n{{selectedIf true}}     => 'selected'\n```\n\n#### checkedIf\nA checkedIf helper for checkboxes.\n\nParameters:\n```\nexpression [boolean] Condition to be checked. (Required)\n```\nReturns `string`\n\nUsage:\n```\n{{checkedIf true}}      => 'checked'\n```\n\n#### options\nAn options helper for generating `<option>` list for `<select>` dropdowns.\n\nParameters:\n```\ndata [array] List of data (Required)\nid [string] Name of identifier key from the data list, defaults to id (Optional)\ntext [string] Name of description key from the data list, defaults to description (Optional)\nselected [string] Id to be set as selected (Optional)\n```\n\nUsage:\n```\n{{{options data}}}\n{{{options data selected=\"value\"}}}\n{{{options data id=\"id\" text=\"description\"}}}\n```\n\nA simple example:\n```\nlet data = [\n    {\n        id: 1,\n        description: 'Foo'\n    },\n    {\n        id: 2,\n        description: 'Bar'\n    },\n    {\n        id: 3,\n        description: 'Foo Bar'\n    }\n];\n```\n```\n{{{options data selected=\"2\"}}}\n```\nwill generate HTML:\n```\n<option value=\"1\">Foo</option>\n<option value=\"2\" selected>Bar</option>\n<option value=\"3\">Foo Bar</option>\n```\nYou can also override the default key names for `id` & `description` using the `id` & `text` options in the helper.\n```\nlet data = [\n    {\n        value: 1,\n        text: 'New York'\n    },\n    {\n        value: 2,\n        text: 'London'\n    }\n];\n```\n```\n{{{options data selected=\"1\" id=\"value\" text=\"text\"}}}\n```\nwill generate HTML:\n```\n<option value=\"1\" selected>New York</option>\n<option value=\"2\">London</option>\n```\n\n### Formatters\n\n#### formatCurrency\nFormat the currency value according to country code and locale.\n\nParameters:\n```\nvalue [number] The numerical value of currency. (Required)\nargs [arbitrary arguments] The currency formatting parameters. (Optional)\n```\n\nReturns: `string`\n\nUsage:\n```\n{{formatCurrency 1234567.89 code='USD'}}  => $1,234,567.89\n{{formatCurrency 1234567.89 code='EUR'}}  => 1.234.567,89 €\n{{formatCurrency 1234567.89 code='EUR' locale=\"en\"}}  => €1,234,567.89\n```\n\nNote: The currency formatting parameters are used from [https://github.com/osrec/currencyFormatter.js](https://github.com/osrec/currencyFormatter.js).\n\n## Testing the helpers\n\n```bash\n# Install dependencies\n$ npm install\n\n# Compile everything\n$ gulp\n\n# Run all the tests\n$ npm test\n```\n\n## Inspired by\n * [Swag](https://github.com/elving/swag)\n * [Dashbars](https://github.com/pismute/dashbars)\n * [Assemble](https://github.com/assemble/handlebars-helpers)\n\n## License\n\n[MIT](LICENSE.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/leapfrogtechnology/just-handlebars-helpers.git"
  },
  "scripts": {
    "build": "npm run clean && gulp",
    "clean": "rimraf dist/ lib/",
    "codecov": "cat coverage/*/lcov.info | codecov",
    "lint": "gulp lint",
    "prepublish": "npm run build --silent",
    "start:testing": "karma start",
    "test": "karma start --single-run --browsers PhantomJS"
  },
  "version": "1.0.13"
}
